Lab5, CS 105, Haverford College, Fall 2019
Prepared by: Rajesh Kumar
Due on: Midnight, October 8th
Max points: 25 + 5 (Bonus)
Goal: to test your looping, conditionals, logical, data structures, and algorithm analysis skills. 

<Marisleysis De La Cruz>

Description: implement the following algorithms, the description (and majority of the code) is given in Chapter 9 of http://itlectures.ro/wp-content/uploads/2016/04/AdamDrozdek__DataStructures_and_Algorithms_in_C_4Ed.pdf

Searching: (Read Search Algorithms _ Linear and Binary Search _ Studytonight.pdf provided with this repo)
   (1.1) LinearSearch
   (1.2) BinarySearchIterative
   (1.3) BinarySearchRecursive


Sorting: (These algorithms are explained in Chapter 9 of http://itlectures.ro/wp-content/uploads/2016/04/AdamDrozdek__DataStructures_and_Algorithms_in_C_4Ed.pdf)
Read Sorting_adam_Data Structures and Algorithms in C++, 4thEd.pdf provided with this repo
   (2.1) BubbleSort
   (2.2) CountingSort

Implement an auxiliary method that test whether a list is already sorted.
You need not and MUST NOT sort the whole list to implement this.
   (3.1) IsSorted---> You have to figure out the logic on your own for this


Once you implement the algorithms properly, you will have some numbers in place of Failed words in the following list.
If everything is implemented correctly, you will see real values in place of all the "Failed" words,

Bubble :  [0.0, 0.0, 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed']
Counting :  [0.0, 0.0, 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed']
Linear :  ['Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed']
BinaryItr :  ['Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed']
BinaryRec :  ['Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed', 'Failed']
*********************************************
Grading Rubric: max possible points are 25+5 (bonus for 3.1)
Your submissions will be graded on the following criteria

(1) The readability of your code, i.e. comments, user of self explanatory identifiers (names of variables, functions, class, objects, etc.)  [2 points]
(2) The correctness of the implementations of the algorithms 1.1, 1.2, 1.3, 2.1, and 2.2 [20]. 
(3) The analysis plots [3], -- for this you will create a brief report in which you will put the graph that gets generated by running your code and explain the graph.
The explanation of the graph should contain which algorithm is taking how much time in terms of number of items that they are working on. The report would be in doc or pdf format
which would be uploaded to you GitHub repository for this lab
(4) Bonus points to implement 3.1 i.e. IsSorted() algorithm [5 points]
